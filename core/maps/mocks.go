// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/waypoint/waypoint/core/maps (interfaces: Client)

package maps

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	context "golang.org/x/net/context"
	maps "googlemaps.github.io/maps"
)

// MockClient is a mock of Client interface
type MockClient struct {
	ctrl     *gomock.Controller
	recorder *MockClientMockRecorder
}

// MockClientMockRecorder is the mock recorder for MockClient
type MockClientMockRecorder struct {
	mock *MockClient
}

// NewMockClient creates a new mock instance
func NewMockClient(ctrl *gomock.Controller) *MockClient {
	mock := &MockClient{ctrl: ctrl}
	mock.recorder = &MockClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (_m *MockClient) EXPECT() *MockClientMockRecorder {
	return _m.recorder
}

// Directions mocks base method
func (_m *MockClient) Directions(_param0 context.Context, _param1 *maps.DirectionsRequest) ([]maps.Route, []maps.GeocodedWaypoint, error) {
	ret := _m.ctrl.Call(_m, "Directions", _param0, _param1)
	ret0, _ := ret[0].([]maps.Route)
	ret1, _ := ret[1].([]maps.GeocodedWaypoint)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Directions indicates an expected call of Directions
func (_mr *MockClientMockRecorder) Directions(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Directions", reflect.TypeOf((*MockClient)(nil).Directions), arg0, arg1)
}
